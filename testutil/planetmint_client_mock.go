// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/planetmint_client.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	secp256k1 "github.com/decred/dcrd/dcrec/secp256k1/v4"
	gomock "github.com/golang/mock/gomock"
	types0 "github.com/planetmint/planetmint-go/x/machine/types"
)

// MockIPlanetmintClient is a mock of IPlanetmintClient interface.
type MockIPlanetmintClient struct {
	ctrl     *gomock.Controller
	recorder *MockIPlanetmintClientMockRecorder
}

// MockIPlanetmintClientMockRecorder is the mock recorder for MockIPlanetmintClient.
type MockIPlanetmintClientMockRecorder struct {
	mock *MockIPlanetmintClient
}

// NewMockIPlanetmintClient creates a new mock instance.
func NewMockIPlanetmintClient(ctrl *gomock.Controller) *MockIPlanetmintClient {
	mock := &MockIPlanetmintClient{ctrl: ctrl}
	mock.recorder = &MockIPlanetmintClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPlanetmintClient) EXPECT() *MockIPlanetmintClientMockRecorder {
	return m.recorder
}

// AttestTAPublicKey mocks base method.
func (m *MockIPlanetmintClient) AttestTAPublicKey(publicKey *secp256k1.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttestTAPublicKey", publicKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttestTAPublicKey indicates an expected call of AttestTAPublicKey.
func (mr *MockIPlanetmintClientMockRecorder) AttestTAPublicKey(publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttestTAPublicKey", reflect.TypeOf((*MockIPlanetmintClient)(nil).AttestTAPublicKey), publicKey)
}

// AttestTAPublicKeyHex mocks base method.
func (m *MockIPlanetmintClient) AttestTAPublicKeyHex(pubHexString string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttestTAPublicKeyHex", pubHexString)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttestTAPublicKeyHex indicates an expected call of AttestTAPublicKeyHex.
func (mr *MockIPlanetmintClientMockRecorder) AttestTAPublicKeyHex(pubHexString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttestTAPublicKeyHex", reflect.TypeOf((*MockIPlanetmintClient)(nil).AttestTAPublicKeyHex), pubHexString)
}

// FundAccount mocks base method.
func (m *MockIPlanetmintClient) FundAccount(plmntAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FundAccount", plmntAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// FundAccount indicates an expected call of FundAccount.
func (mr *MockIPlanetmintClientMockRecorder) FundAccount(plmntAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FundAccount", reflect.TypeOf((*MockIPlanetmintClient)(nil).FundAccount), plmntAddress)
}

// GetAccount mocks base method.
func (m *MockIPlanetmintClient) GetAccount(plmntAddress string) (*types.QueryAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", plmntAddress)
	ret0, _ := ret[0].(*types.QueryAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockIPlanetmintClientMockRecorder) GetAccount(plmntAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockIPlanetmintClient)(nil).GetAccount), plmntAddress)
}

// GetTrustAnchorStatus mocks base method.
func (m *MockIPlanetmintClient) GetTrustAnchorStatus(machineID string) (*types0.QueryGetTrustAnchorStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrustAnchorStatus", machineID)
	ret0, _ := ret[0].(*types0.QueryGetTrustAnchorStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrustAnchorStatus indicates an expected call of GetTrustAnchorStatus.
func (mr *MockIPlanetmintClientMockRecorder) GetTrustAnchorStatus(machineID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrustAnchorStatus", reflect.TypeOf((*MockIPlanetmintClient)(nil).GetTrustAnchorStatus), machineID)
}
